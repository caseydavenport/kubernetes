// +build !ignore_autogenerated

/*
Copyright 2016 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by conversion-gen. Do not edit it manually!

package v1beta1

import (
	api "k8s.io/kubernetes/pkg/api"
	unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	v1 "k8s.io/kubernetes/pkg/api/v1"
	policy "k8s.io/kubernetes/pkg/apis/policy"
	conversion "k8s.io/kubernetes/pkg/conversion"
	intstr "k8s.io/kubernetes/pkg/util/intstr"
)

func init() {
	if err := api.Scheme.AddGeneratedConversionFuncs(
		Convert_v1beta1_NetworkPolicy_To_policy_NetworkPolicy,
		Convert_policy_NetworkPolicy_To_v1beta1_NetworkPolicy,
		Convert_v1beta1_NetworkPolicyIngressRule_To_policy_NetworkPolicyIngressRule,
		Convert_policy_NetworkPolicyIngressRule_To_v1beta1_NetworkPolicyIngressRule,
		Convert_v1beta1_NetworkPolicyList_To_policy_NetworkPolicyList,
		Convert_policy_NetworkPolicyList_To_v1beta1_NetworkPolicyList,
		Convert_v1beta1_NetworkPolicyPeer_To_policy_NetworkPolicyPeer,
		Convert_policy_NetworkPolicyPeer_To_v1beta1_NetworkPolicyPeer,
		Convert_v1beta1_NetworkPolicyPort_To_policy_NetworkPolicyPort,
		Convert_policy_NetworkPolicyPort_To_v1beta1_NetworkPolicyPort,
		Convert_v1beta1_NetworkPolicySpec_To_policy_NetworkPolicySpec,
		Convert_policy_NetworkPolicySpec_To_v1beta1_NetworkPolicySpec,
	); err != nil {
		// if one of the conversion functions is malformed, detect it immediately.
		panic(err)
	}
}

func autoConvert_v1beta1_NetworkPolicy_To_policy_NetworkPolicy(in *NetworkPolicy, out *policy.NetworkPolicy, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	if err := Convert_v1beta1_NetworkPolicySpec_To_policy_NetworkPolicySpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1beta1_NetworkPolicy_To_policy_NetworkPolicy(in *NetworkPolicy, out *policy.NetworkPolicy, s conversion.Scope) error {
	return autoConvert_v1beta1_NetworkPolicy_To_policy_NetworkPolicy(in, out, s)
}

func autoConvert_policy_NetworkPolicy_To_v1beta1_NetworkPolicy(in *policy.NetworkPolicy, out *NetworkPolicy, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	if err := Convert_policy_NetworkPolicySpec_To_v1beta1_NetworkPolicySpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_policy_NetworkPolicy_To_v1beta1_NetworkPolicy(in *policy.NetworkPolicy, out *NetworkPolicy, s conversion.Scope) error {
	return autoConvert_policy_NetworkPolicy_To_v1beta1_NetworkPolicy(in, out, s)
}

func autoConvert_v1beta1_NetworkPolicyIngressRule_To_policy_NetworkPolicyIngressRule(in *NetworkPolicyIngressRule, out *policy.NetworkPolicyIngressRule, s conversion.Scope) error {
	if in.Ports != nil {
		in, out := &in.Ports, &out.Ports
		*out = make([]policy.NetworkPolicyPort, len(*in))
		for i := range *in {
			if err := Convert_v1beta1_NetworkPolicyPort_To_policy_NetworkPolicyPort(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Ports = nil
	}
	if in.From != nil {
		in, out := &in.From, &out.From
		*out = make([]policy.NetworkPolicyPeer, len(*in))
		for i := range *in {
			if err := Convert_v1beta1_NetworkPolicyPeer_To_policy_NetworkPolicyPeer(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.From = nil
	}
	return nil
}

func Convert_v1beta1_NetworkPolicyIngressRule_To_policy_NetworkPolicyIngressRule(in *NetworkPolicyIngressRule, out *policy.NetworkPolicyIngressRule, s conversion.Scope) error {
	return autoConvert_v1beta1_NetworkPolicyIngressRule_To_policy_NetworkPolicyIngressRule(in, out, s)
}

func autoConvert_policy_NetworkPolicyIngressRule_To_v1beta1_NetworkPolicyIngressRule(in *policy.NetworkPolicyIngressRule, out *NetworkPolicyIngressRule, s conversion.Scope) error {
	if in.Ports != nil {
		in, out := &in.Ports, &out.Ports
		*out = make([]NetworkPolicyPort, len(*in))
		for i := range *in {
			if err := Convert_policy_NetworkPolicyPort_To_v1beta1_NetworkPolicyPort(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Ports = nil
	}
	if in.From != nil {
		in, out := &in.From, &out.From
		*out = make([]NetworkPolicyPeer, len(*in))
		for i := range *in {
			if err := Convert_policy_NetworkPolicyPeer_To_v1beta1_NetworkPolicyPeer(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.From = nil
	}
	return nil
}

func Convert_policy_NetworkPolicyIngressRule_To_v1beta1_NetworkPolicyIngressRule(in *policy.NetworkPolicyIngressRule, out *NetworkPolicyIngressRule, s conversion.Scope) error {
	return autoConvert_policy_NetworkPolicyIngressRule_To_v1beta1_NetworkPolicyIngressRule(in, out, s)
}

func autoConvert_v1beta1_NetworkPolicyList_To_policy_NetworkPolicyList(in *NetworkPolicyList, out *policy.NetworkPolicyList, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := api.Convert_unversioned_ListMeta_To_unversioned_ListMeta(&in.ListMeta, &out.ListMeta, s); err != nil {
		return err
	}
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]policy.NetworkPolicy, len(*in))
		for i := range *in {
			if err := Convert_v1beta1_NetworkPolicy_To_policy_NetworkPolicy(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_v1beta1_NetworkPolicyList_To_policy_NetworkPolicyList(in *NetworkPolicyList, out *policy.NetworkPolicyList, s conversion.Scope) error {
	return autoConvert_v1beta1_NetworkPolicyList_To_policy_NetworkPolicyList(in, out, s)
}

func autoConvert_policy_NetworkPolicyList_To_v1beta1_NetworkPolicyList(in *policy.NetworkPolicyList, out *NetworkPolicyList, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := api.Convert_unversioned_ListMeta_To_unversioned_ListMeta(&in.ListMeta, &out.ListMeta, s); err != nil {
		return err
	}
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]NetworkPolicy, len(*in))
		for i := range *in {
			if err := Convert_policy_NetworkPolicy_To_v1beta1_NetworkPolicy(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_policy_NetworkPolicyList_To_v1beta1_NetworkPolicyList(in *policy.NetworkPolicyList, out *NetworkPolicyList, s conversion.Scope) error {
	return autoConvert_policy_NetworkPolicyList_To_v1beta1_NetworkPolicyList(in, out, s)
}

func autoConvert_v1beta1_NetworkPolicyPeer_To_policy_NetworkPolicyPeer(in *NetworkPolicyPeer, out *policy.NetworkPolicyPeer, s conversion.Scope) error {
	if in.Pods != nil {
		in, out := &in.Pods, &out.Pods
		*out = new(unversioned.LabelSelector)
		// TODO: Inefficient conversion - can we improve it?
		if err := s.Convert(*in, *out, 0); err != nil {
			return err
		}
	} else {
		out.Pods = nil
	}
	if in.Namespaces != nil {
		in, out := &in.Namespaces, &out.Namespaces
		*out = new(unversioned.LabelSelector)
		// TODO: Inefficient conversion - can we improve it?
		if err := s.Convert(*in, *out, 0); err != nil {
			return err
		}
	} else {
		out.Namespaces = nil
	}
	return nil
}

func Convert_v1beta1_NetworkPolicyPeer_To_policy_NetworkPolicyPeer(in *NetworkPolicyPeer, out *policy.NetworkPolicyPeer, s conversion.Scope) error {
	return autoConvert_v1beta1_NetworkPolicyPeer_To_policy_NetworkPolicyPeer(in, out, s)
}

func autoConvert_policy_NetworkPolicyPeer_To_v1beta1_NetworkPolicyPeer(in *policy.NetworkPolicyPeer, out *NetworkPolicyPeer, s conversion.Scope) error {
	if in.Pods != nil {
		in, out := &in.Pods, &out.Pods
		*out = new(unversioned.LabelSelector)
		// TODO: Inefficient conversion - can we improve it?
		if err := s.Convert(*in, *out, 0); err != nil {
			return err
		}
	} else {
		out.Pods = nil
	}
	if in.Namespaces != nil {
		in, out := &in.Namespaces, &out.Namespaces
		*out = new(unversioned.LabelSelector)
		// TODO: Inefficient conversion - can we improve it?
		if err := s.Convert(*in, *out, 0); err != nil {
			return err
		}
	} else {
		out.Namespaces = nil
	}
	return nil
}

func Convert_policy_NetworkPolicyPeer_To_v1beta1_NetworkPolicyPeer(in *policy.NetworkPolicyPeer, out *NetworkPolicyPeer, s conversion.Scope) error {
	return autoConvert_policy_NetworkPolicyPeer_To_v1beta1_NetworkPolicyPeer(in, out, s)
}

func autoConvert_v1beta1_NetworkPolicyPort_To_policy_NetworkPolicyPort(in *NetworkPolicyPort, out *policy.NetworkPolicyPort, s conversion.Scope) error {
	if in.Protocol != nil {
		in, out := &in.Protocol, &out.Protocol
		*out = new(api.Protocol)
		**out = api.Protocol(**in)
	} else {
		out.Protocol = nil
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(intstr.IntOrString)
		if err := api.Convert_intstr_IntOrString_To_intstr_IntOrString(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Port = nil
	}
	return nil
}

func Convert_v1beta1_NetworkPolicyPort_To_policy_NetworkPolicyPort(in *NetworkPolicyPort, out *policy.NetworkPolicyPort, s conversion.Scope) error {
	return autoConvert_v1beta1_NetworkPolicyPort_To_policy_NetworkPolicyPort(in, out, s)
}

func autoConvert_policy_NetworkPolicyPort_To_v1beta1_NetworkPolicyPort(in *policy.NetworkPolicyPort, out *NetworkPolicyPort, s conversion.Scope) error {
	if in.Protocol != nil {
		in, out := &in.Protocol, &out.Protocol
		*out = new(v1.Protocol)
		**out = v1.Protocol(**in)
	} else {
		out.Protocol = nil
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(intstr.IntOrString)
		if err := api.Convert_intstr_IntOrString_To_intstr_IntOrString(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.Port = nil
	}
	return nil
}

func Convert_policy_NetworkPolicyPort_To_v1beta1_NetworkPolicyPort(in *policy.NetworkPolicyPort, out *NetworkPolicyPort, s conversion.Scope) error {
	return autoConvert_policy_NetworkPolicyPort_To_v1beta1_NetworkPolicyPort(in, out, s)
}

func autoConvert_v1beta1_NetworkPolicySpec_To_policy_NetworkPolicySpec(in *NetworkPolicySpec, out *policy.NetworkPolicySpec, s conversion.Scope) error {
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.PodSelector, &out.PodSelector, 0); err != nil {
		return err
	}
	if in.Ingress != nil {
		in, out := &in.Ingress, &out.Ingress
		*out = make([]policy.NetworkPolicyIngressRule, len(*in))
		for i := range *in {
			if err := Convert_v1beta1_NetworkPolicyIngressRule_To_policy_NetworkPolicyIngressRule(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Ingress = nil
	}
	return nil
}

func Convert_v1beta1_NetworkPolicySpec_To_policy_NetworkPolicySpec(in *NetworkPolicySpec, out *policy.NetworkPolicySpec, s conversion.Scope) error {
	return autoConvert_v1beta1_NetworkPolicySpec_To_policy_NetworkPolicySpec(in, out, s)
}

func autoConvert_policy_NetworkPolicySpec_To_v1beta1_NetworkPolicySpec(in *policy.NetworkPolicySpec, out *NetworkPolicySpec, s conversion.Scope) error {
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.PodSelector, &out.PodSelector, 0); err != nil {
		return err
	}
	if in.Ingress != nil {
		in, out := &in.Ingress, &out.Ingress
		*out = make([]NetworkPolicyIngressRule, len(*in))
		for i := range *in {
			if err := Convert_policy_NetworkPolicyIngressRule_To_v1beta1_NetworkPolicyIngressRule(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Ingress = nil
	}
	return nil
}

func Convert_policy_NetworkPolicySpec_To_v1beta1_NetworkPolicySpec(in *policy.NetworkPolicySpec, out *NetworkPolicySpec, s conversion.Scope) error {
	return autoConvert_policy_NetworkPolicySpec_To_v1beta1_NetworkPolicySpec(in, out, s)
}
